#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const openerCommand = require("opener");
const readline = require("readline");
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});
const jspmHmrServer = require("./jspm-hmr-server");
const init_1 = require("./init");
const utils_1 = require("./utils");
const config_1 = require("./config");
const packageVersion = require('../package.json').version;
const packageDescription = require('../package.json').description;
const VERSION = require('../package.json').version;
const NODE_ENV = config_1.default.NODE_ENV;
const commander = require('commander');
commander
    .version(packageVersion)
    .description(packageDescription + '\n  Version: ' + packageVersion)
    .usage('[path] [options]')
    .option('-I, --init', 'run CLI Wizard to bootstrap your project')
    .option('-O, --open', 'open default browser on server start')
    .option('--port <number>', 'change default port number (default: 3000)', parseInt)
    .option('--address <address>', 'change default address (default: localhost)')
    .option('--cache <seconds>', 'change default Cache-Control header max-age=<seconds> (default: -1)', parseInt)
    .option('--proxy <address:port>', 'enable proxy of all requests to specified target')
    .option('--proxy-route <route_pattern>', 'change default route pattern to filter proxied requests (default: *)')
    .option('-S, --ssl', 'enable https (by default will use built-in self-signed cert)')
    .option('--key <path>', 'set path to ssl-key .pem file (will override built-in ssl-key)')
    .option('--cert <path>', 'set path to ssl-cert .pem file (will override built-in ssl-cert)')
    .option('-F, --fallback [rewrite_target]', 'enable HTML5 History Api Fallback (default: /index.html) [optional: change rewrite target]')
    .option('--disable-hmr', 'disable Hot-Reload (Chokidar Socket Server)')
    .option('--verbose', 'enable verbose logging for: fallback rewrites')
    .parse(process.argv);
mainAsync();
function mainAsync() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (commander.init) {
            yield init_1.initProject();
        }
        else {
            logHeaderMessage();
            const OPEN = commander.open || false;
            const PORT = commander.port || config_1.default.PORT;
            if (PORT < 1024) {
                console.log();
                utils_1.logger.warning(`PORT lower than 1024 require Admin Priviledges`);
                console.log();
            }
            const ADDRESS = commander.address || config_1.default.ADDRESS;
            const options = {
                path: commander.args[0] || '.',
                cache: commander.cache,
                proxy: commander.proxy,
                proxyRoute: commander.proxyRoute,
                ssl: commander.ssl,
                key: commander.key,
                cert: commander.cert,
                fallback: commander.fallback,
                disableHmr: commander.disableHmr,
                verbose: commander.verbose,
            };
            const protocol = options.ssl ? 'https' : 'http';
            const URL = protocol + '://' + ADDRESS + ':' + PORT;
            const server = jspmHmrServer.createServer(options);
            server.on('error', function (err) {
                if (err.code === 'EADDRINUSE') {
                    utils_1.logger.warning(`Selected address is in use: ${URL}`);
                    utils_1.logger.warning(`Please try again using different port or address...`);
                    process.exit();
                }
                throw err;
            });
            server.listen(PORT, () => {
                console.log(`listening at ${URL}`);
                console.log();
                console.log('>>> hit CTRL-C twice to exit <<<\n');
                if (OPEN) {
                    openerCommand(URL, {
                        command: undefined,
                    });
                }
            });
        }
        rl.close();
    });
}
function logHeaderMessage() {
    const message = `#  JSPM Hot-Module-Reload v${VERSION}  #`;
    const border = '#'.repeat(message.length);
    console.log(`
  ${border}
  ${message}
  ${border}
`);
    console.log(`environment ${NODE_ENV || 'development'}`);
}
if (process.platform === 'win32') {
    rl.on('SIGINT', function () {
        process.emit('SIGINT');
    });
}
process.on('SIGINT', function () {
    console.log('\n\nhttp-server stopped!');
    process.exit();
});
process.on('SIGTERM', function () {
    console.log('\n\nhttp-server stopped!');
    process.exit();
});
//# sourceMappingURL=cli.js.map