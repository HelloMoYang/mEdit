"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs = require("fs");
const path = require("path");
const shelljs_1 = require("shelljs");
const readline = require("readline");
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});
function initProject() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const targetRoot = process.cwd();
        const sourceRoot = path.join(__dirname, '../boilerplate');
        const clientFiles = ['index.html', 'assets/loader-style.css', 'src/app.js', 'src/es6module.js'];
        const serverFiles = ['server.js'];
        console.log('  Initialization directory -> ' + targetRoot);
        const initConfirmed = yield confirmationPromptPromise('  - Is path correct?');
        if (!initConfirmed) {
            console.log('  Initialization aborted.');
            return;
        }
        try {
            const files = [...clientFiles, ...serverFiles];
            for (let file of files) {
                const sourcePath = path.join(sourceRoot, file);
                const targetPath = path.join(targetRoot, file);
                if (yield checkFileExistsPromise(targetPath)) {
                    console.log(`\n  File "${file}" already exists.`);
                    const fileOverwriteConfirmed = yield confirmationPromptPromise('  - Overwrite?');
                    if (!fileOverwriteConfirmed) {
                        console.log('  Skipped');
                    }
                    else {
                        yield copyFilePromise(sourcePath, targetPath);
                    }
                }
            }
            console.log('\n Boilerplate initialization completed.');
        }
        catch (err) {
            console.log('\n Boilerplate initialization failed with error:');
            console.log(err);
        }
        rl.close();
    });
}
exports.initProject = initProject;
function checkFileExistsPromise(file) {
    return new Promise((resolve, reject) => {
        fs.access(file, fs.constants.W_OK, (err) => {
            if (err) {
                resolve(false);
            }
            resolve(true);
        });
    });
}
function confirmationPromptPromise(msg) {
    return new Promise((resolve, reject) => {
        rl.question(msg + ' (Y)/n: ', (answer) => {
            const parsed = answer.toString().toLowerCase();
            if (parsed === 'y' || parsed === '') {
                resolve(true);
            }
            else {
                resolve(false);
            }
        });
    });
}
function copyFilePromise(source, target) {
    return new Promise((resolve, reject) => {
        fs.readFile(source, (err, data) => {
            if (err)
                reject(err);
            shelljs_1.mkdir('-p', path.dirname(target));
            fs.writeFile(target, data, (err2) => {
                if (err2)
                    reject(err2);
                console.log('%s -> %s', source, target);
                resolve(true);
            });
        });
    });
}
//# sourceMappingURL=init.js.map