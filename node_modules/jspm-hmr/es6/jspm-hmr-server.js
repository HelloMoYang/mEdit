"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const http = require("http");
const https = require("https");
const httpProxy = require("http-proxy");
const express = require("express");
const compress = require("compression");
const historyApiFallback = require("connect-history-api-fallback");
const chokidar = require("chokidar-socket-emitter");
const config_1 = require("./config");
function createServer(options) {
    const app = express();
    app.use(compress());
    if (options.proxy) {
        const proxyTarget = options.proxy;
        const proxyRoute = options.proxyRoute || '*';
        const proxyServer = httpProxy.createProxyServer();
        app.use(proxyRoute, (req, res) => {
            req.url = `${req.originalUrl}`;
            proxyServer.web(req, res, { target: proxyTarget });
            proxyServer.on('error', (err) => {
                console.log('Proxy Server Error: ', err.message);
            });
        });
    }
    if (options.fallback) {
        const fallback = options.fallback === true ? '/index.html' : options.fallback;
        console.log('history api fallback active', fallback);
        app.use(historyApiFallback({
            index: fallback, verbose: !!options.verbose,
        }));
    }
    const cache = options.cache && options.cache * 1000 || -1;
    const staticRoot = options.path || '.';
    console.log(`static files served from ${path.resolve(staticRoot)}`);
    app.use(express.static(staticRoot, { maxAge: cache }));
    let serverInstance;
    if (options.ssl) {
        const key = options.key || config_1.default.KEY_PATH;
        const cert = options.cert || config_1.default.CERT_PATH;
        const sslOptions = (key && cert) && {
            key: fs.readFileSync(key),
            cert: fs.readFileSync(cert),
        };
        serverInstance = https.createServer(sslOptions, app);
    }
    else {
        serverInstance = http.createServer(app);
    }
    if (!options.disableHmr) {
        const chokidarOptions = Object.assign({ quiet: false, path: options.path }, { app: serverInstance });
        chokidar(chokidarOptions);
    }
    return serverInstance;
}
exports.createServer = createServer;
//# sourceMappingURL=jspm-hmr-server.js.map