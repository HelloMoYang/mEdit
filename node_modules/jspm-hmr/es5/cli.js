#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var openerCommand = require("opener");
var readline = require("readline");
var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});
var jspmHmrServer = require("./jspm-hmr-server");
var init_1 = require("./init");
var utils_1 = require("./utils");
var config_1 = require("./config");
var packageVersion = require('../package.json').version;
var packageDescription = require('../package.json').description;
var VERSION = require('../package.json').version;
var NODE_ENV = config_1.default.NODE_ENV;
var commander = require('commander');
commander
    .version(packageVersion)
    .description(packageDescription + '\n  Version: ' + packageVersion)
    .usage('[path] [options]')
    .option('-I, --init', 'run CLI Wizard to bootstrap your project')
    .option('-O, --open', 'open default browser on server start')
    .option('--port <number>', 'change default port number (default: 3000)', parseInt)
    .option('--address <address>', 'change default address (default: localhost)')
    .option('--cache <seconds>', 'change default Cache-Control header max-age=<seconds> (default: -1)', parseInt)
    .option('--proxy <address:port>', 'enable proxy of all requests to specified target')
    .option('--proxy-route <route_pattern>', 'change default route pattern to filter proxied requests (default: *)')
    .option('-S, --ssl', 'enable https (by default will use built-in self-signed cert)')
    .option('--key <path>', 'set path to ssl-key .pem file (will override built-in ssl-key)')
    .option('--cert <path>', 'set path to ssl-cert .pem file (will override built-in ssl-cert)')
    .option('-F, --fallback [rewrite_target]', 'enable HTML5 History Api Fallback (default: /index.html) [optional: change rewrite target]')
    .option('--disable-hmr', 'disable Hot-Reload (Chokidar Socket Server)')
    .option('--verbose', 'enable verbose logging for: fallback rewrites')
    .parse(process.argv);
mainAsync();
function mainAsync() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var OPEN_1, PORT, ADDRESS, options, protocol, URL_1, server;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!commander.init) return [3 /*break*/, 2];
                    return [4 /*yield*/, init_1.initProject()];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    logHeaderMessage();
                    OPEN_1 = commander.open || false;
                    PORT = commander.port || config_1.default.PORT;
                    if (PORT < 1024) {
                        console.log();
                        utils_1.logger.warning("PORT lower than 1024 require Admin Priviledges");
                        console.log();
                    }
                    ADDRESS = commander.address || config_1.default.ADDRESS;
                    options = {
                        path: commander.args[0] || '.',
                        cache: commander.cache,
                        proxy: commander.proxy,
                        proxyRoute: commander.proxyRoute,
                        ssl: commander.ssl,
                        key: commander.key,
                        cert: commander.cert,
                        fallback: commander.fallback,
                        disableHmr: commander.disableHmr,
                        verbose: commander.verbose,
                    };
                    protocol = options.ssl ? 'https' : 'http';
                    URL_1 = protocol + '://' + ADDRESS + ':' + PORT;
                    server = jspmHmrServer.createServer(options);
                    server.on('error', function (err) {
                        if (err.code === 'EADDRINUSE') {
                            utils_1.logger.warning("Selected address is in use: " + URL_1);
                            utils_1.logger.warning("Please try again using different port or address...");
                            process.exit();
                        }
                        throw err;
                    });
                    server.listen(PORT, function () {
                        console.log("listening at " + URL_1);
                        console.log();
                        console.log('>>> hit CTRL-C twice to exit <<<\n');
                        if (OPEN_1) {
                            openerCommand(URL_1, {
                                command: undefined,
                            });
                        }
                    });
                    _a.label = 3;
                case 3:
                    rl.close();
                    return [2 /*return*/];
            }
        });
    });
}
function logHeaderMessage() {
    var message = "#  JSPM Hot-Module-Reload v" + VERSION + "  #";
    var border = '#'.repeat(message.length);
    console.log("\n  " + border + "\n  " + message + "\n  " + border + "\n");
    console.log("environment " + (NODE_ENV || 'development'));
}
if (process.platform === 'win32') {
    rl.on('SIGINT', function () {
        process.emit('SIGINT');
    });
}
process.on('SIGINT', function () {
    console.log('\n\nhttp-server stopped!');
    process.exit();
});
process.on('SIGTERM', function () {
    console.log('\n\nhttp-server stopped!');
    process.exit();
});
//# sourceMappingURL=cli.js.map