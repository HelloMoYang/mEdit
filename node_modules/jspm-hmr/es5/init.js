"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs = require("fs");
var path = require("path");
var shelljs_1 = require("shelljs");
var readline = require("readline");
var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});
function initProject() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var targetRoot, sourceRoot, clientFiles, serverFiles, initConfirmed, files, _i, files_1, file, sourcePath, targetPath, fileOverwriteConfirmed, err_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    targetRoot = process.cwd();
                    sourceRoot = path.join(__dirname, '../boilerplate');
                    clientFiles = ['index.html', 'assets/loader-style.css', 'src/app.js', 'src/es6module.js'];
                    serverFiles = ['server.js'];
                    console.log('  Initialization directory -> ' + targetRoot);
                    return [4 /*yield*/, confirmationPromptPromise('  - Is path correct?')];
                case 1:
                    initConfirmed = _a.sent();
                    if (!initConfirmed) {
                        console.log('  Initialization aborted.');
                        return [2 /*return*/];
                    }
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 10, , 11]);
                    files = clientFiles.concat(serverFiles);
                    _i = 0, files_1 = files;
                    _a.label = 3;
                case 3:
                    if (!(_i < files_1.length)) return [3 /*break*/, 9];
                    file = files_1[_i];
                    sourcePath = path.join(sourceRoot, file);
                    targetPath = path.join(targetRoot, file);
                    return [4 /*yield*/, checkFileExistsPromise(targetPath)];
                case 4:
                    if (!_a.sent()) return [3 /*break*/, 8];
                    console.log("\n  File \"" + file + "\" already exists.");
                    return [4 /*yield*/, confirmationPromptPromise('  - Overwrite?')];
                case 5:
                    fileOverwriteConfirmed = _a.sent();
                    if (!!fileOverwriteConfirmed) return [3 /*break*/, 6];
                    console.log('  Skipped');
                    return [3 /*break*/, 8];
                case 6: return [4 /*yield*/, copyFilePromise(sourcePath, targetPath)];
                case 7:
                    _a.sent();
                    _a.label = 8;
                case 8:
                    _i++;
                    return [3 /*break*/, 3];
                case 9:
                    console.log('\n Boilerplate initialization completed.');
                    return [3 /*break*/, 11];
                case 10:
                    err_1 = _a.sent();
                    console.log('\n Boilerplate initialization failed with error:');
                    console.log(err_1);
                    return [3 /*break*/, 11];
                case 11:
                    rl.close();
                    return [2 /*return*/];
            }
        });
    });
}
exports.initProject = initProject;
function checkFileExistsPromise(file) {
    return new Promise(function (resolve, reject) {
        fs.access(file, fs.constants.W_OK, function (err) {
            if (err) {
                resolve(false);
            }
            resolve(true);
        });
    });
}
function confirmationPromptPromise(msg) {
    return new Promise(function (resolve, reject) {
        rl.question(msg + ' (Y)/n: ', function (answer) {
            var parsed = answer.toString().toLowerCase();
            if (parsed === 'y' || parsed === '') {
                resolve(true);
            }
            else {
                resolve(false);
            }
        });
    });
}
function copyFilePromise(source, target) {
    return new Promise(function (resolve, reject) {
        fs.readFile(source, function (err, data) {
            if (err)
                reject(err);
            shelljs_1.mkdir('-p', path.dirname(target));
            fs.writeFile(target, data, function (err2) {
                if (err2)
                    reject(err2);
                console.log('%s -> %s', source, target);
                resolve(true);
            });
        });
    });
}
//# sourceMappingURL=init.js.map