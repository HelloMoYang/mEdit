"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var path = require("path");
var fs = require("fs");
var http = require("http");
var https = require("https");
var httpProxy = require("http-proxy");
var express = require("express");
var compress = require("compression");
var historyApiFallback = require("connect-history-api-fallback");
var chokidar = require("chokidar-socket-emitter");
var config_1 = require("./config");
function createServer(options) {
    var app = express();
    app.use(compress());
    if (options.proxy) {
        var proxyTarget_1 = options.proxy;
        var proxyRoute = options.proxyRoute || '*';
        var proxyServer_1 = httpProxy.createProxyServer();
        app.use(proxyRoute, function (req, res) {
            req.url = "" + req.originalUrl;
            proxyServer_1.web(req, res, { target: proxyTarget_1 });
            proxyServer_1.on('error', function (err) {
                console.log('Proxy Server Error: ', err.message);
            });
        });
    }
    if (options.fallback) {
        var fallback = options.fallback === true ? '/index.html' : options.fallback;
        console.log('history api fallback active', fallback);
        app.use(historyApiFallback({
            index: fallback, verbose: !!options.verbose,
        }));
    }
    var cache = options.cache && options.cache * 1000 || -1;
    var staticRoot = options.path || '.';
    console.log("static files served from " + path.resolve(staticRoot));
    app.use(express.static(staticRoot, { maxAge: cache }));
    var serverInstance;
    if (options.ssl) {
        var key = options.key || config_1.default.KEY_PATH;
        var cert = options.cert || config_1.default.CERT_PATH;
        var sslOptions = (key && cert) && {
            key: fs.readFileSync(key),
            cert: fs.readFileSync(cert),
        };
        serverInstance = https.createServer(sslOptions, app);
    }
    else {
        serverInstance = http.createServer(app);
    }
    if (!options.disableHmr) {
        var chokidarOptions = tslib_1.__assign({ quiet: false, path: options.path }, { app: serverInstance });
        chokidar(chokidarOptions);
    }
    return serverInstance;
}
exports.createServer = createServer;
//# sourceMappingURL=jspm-hmr-server.js.map